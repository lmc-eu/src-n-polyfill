;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "attr": parse_attr,
        "media": parse_media,
        "medium": parse_medium,
        "urlset": parse_urlset,
        "xurlset": parse_xurlset,
        "xurl": parse_xurl,
        "vurlset": parse_vurlset,
        "viewportlist": parse_viewportlist,
        "imagesize": parse_imagesize,
        "sizeurls": parse_sizeurls,
        "sizeurl": parse_sizeurl,
        "url": parse_url,
        "ident": parse_ident,
        "num": parse_num,
        "integer": parse_integer,
        "float": parse_float,
        "s": parse_s,
        "IDENT": parse_IDENT,
        "DIMENSION": parse_DIMENSION,
        "NUMBER": parse_NUMBER,
        "PERCENTAGE": parse_PERCENTAGE,
        "RESOLUTION": parse_RESOLUTION,
        "RESOLUTION_UNIT": parse_RESOLUTION_UNIT,
        "CALC": parse_CALC,
        "EXPR": parse_EXPR,
        "OPERATOR": parse_OPERATOR,
        "A": parse_A,
        "C": parse_C,
        "D": parse_D,
        "I": parse_I,
        "L": parse_L,
        "M": parse_M,
        "P": parse_P,
        "X": parse_X
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_attr();
        if (result0 !== null) {
          result0 = (function(offset, attr) { return attr; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attr() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_media();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          result2 = parse_s();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_s();
          }
          if (result1 !== null) {
            result2 = parse_urlset();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, media, urlset) {
            return {
             type: "src-n-attribute",
             "media-query": media ? media : null,
             urls: urlset
            }
          })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_media() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_s();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_s();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 40) {
            result1 = "(";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_s();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_s();
            }
            if (result2 !== null) {
              result3 = parse_medium();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  result4 = ")";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_s();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_s();
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, medium) {
            return medium;
          })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_medium() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_IDENT();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_s();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_s();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 58) {
              result2 = ":";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_s();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_s();
              }
              if (result3 !== null) {
                result4 = parse_DIMENSION();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_s();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_s();
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, feature, dimension) {
            return {
              feature: feature,
              dimension: dimension
            }
          })(pos0, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_urlset() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_vurlset();
        if (result0 === null) {
          result0 = parse_xurlset();
        }
        if (result0 !== null) {
          result0 = (function(offset, urlset) { return urlset; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_xurlset() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_xurl();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          if (input.charCodeAt(pos) === 44) {
            result2 = ",";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result2 !== null) {
            result3 = [];
            result4 = parse_s();
            while (result4 !== null) {
              result3.push(result4);
              result4 = parse_s();
            }
            if (result3 !== null) {
              result4 = parse_xurl();
              if (result4 !== null) {
                result2 = [result2, result3, result4];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            if (input.charCodeAt(pos) === 44) {
              result2 = ",";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_s();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_s();
              }
              if (result3 !== null) {
                result4 = parse_xurl();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
            var result = [head];
            for (var i = 0; i < tail.length; i++) {
            result.push(tail[i][2]);
            }
            return {
            type: "x-based-urls",
            urls: result
            };
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_xurl() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_url();
        if (result0 !== null) {
          pos2 = pos;
          result2 = parse_s();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_s();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_RESOLUTION();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, url, resolution) {
            return {
              url: url,
              resolution: resolution[1] ? resolution[1] : ""
            }
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_vurlset() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_viewportlist();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_s();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_s();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 59) {
              result2 = ";";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\";\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_s();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_s();
              }
              if (result3 !== null) {
                result4 = parse_sizeurls();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, vplist, sizeurls) {
          return {
            type: "viewport-urls",
            "size-viewport-list": vplist,
            "size-based-urls": sizeurls
          }
        
        })(pos0, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_viewportlist() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_imagesize();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = [];
          result3 = parse_s();
          while (result3 !== null) {
            result2.push(result3);
            result3 = parse_s();
          }
          if (result2 !== null) {
            if (input.charCodeAt(pos) === 40) {
              result3 = "(";
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result3 !== null) {
              result4 = parse_DIMENSION();
              if (result4 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  result5 = ")";
                  pos++;
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result5 !== null) {
                  result6 = [];
                  result7 = parse_s();
                  while (result7 !== null) {
                    result6.push(result7);
                    result7 = parse_s();
                  }
                  if (result6 !== null) {
                    result7 = parse_imagesize();
                    if (result7 === null) {
                      result7 = parse_CALC();
                    }
                    if (result7 !== null) {
                      result2 = [result2, result3, result4, result5, result6, result7];
                    } else {
                      result2 = null;
                      pos = pos2;
                    }
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = [];
            result3 = parse_s();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_s();
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 40) {
                result3 = "(";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_DIMENSION();
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 41) {
                    result5 = ")";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_s();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_s();
                    }
                    if (result6 !== null) {
                      result7 = parse_imagesize();
                      if (result7 === null) {
                        result7 = parse_CALC();
                      }
                      if (result7 !== null) {
                        result2 = [result2, result3, result4, result5, result6, result7];
                      } else {
                        result2 = null;
                        pos = pos2;
                      }
                    } else {
                      result2 = null;
                      pos = pos2;
                    }
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
            var result = [{
              "image-size": head
            }];
            var last = 0;
            for (var i = 0; i < tail.length; i++) {
              result[last]["viewport-size"] = tail[i][2];
              result.push({
                "image-size": tail[i][5]
              });
              last++;
            }
            return result;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_imagesize() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_PERCENTAGE();
        if (result0 === null) {
          result0 = parse_DIMENSION();
        }
        if (result0 !== null) {
          result0 = (function(offset, size) {
            return size;
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_sizeurls() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_sizeurl();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          if (input.charCodeAt(pos) === 44) {
            result2 = ",";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result2 !== null) {
            result3 = [];
            result4 = parse_s();
            while (result4 !== null) {
              result3.push(result4);
              result4 = parse_s();
            }
            if (result3 !== null) {
              result4 = parse_sizeurl();
              if (result4 !== null) {
                result2 = [result2, result3, result4];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            if (input.charCodeAt(pos) === 44) {
              result2 = ",";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_s();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_s();
              }
              if (result3 !== null) {
                result4 = parse_sizeurl();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
            var result = [head];
            for (var i = 0; i < tail.length; i++) {
              result.push(tail[i][2]);
            }
            return result;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_sizeurl() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_url();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_s();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_s();
          }
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, url, size) {
            return {
              url: url,
              size: size
            }
          })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_url() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[^ \t\r\n\f]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^ \\t\\r\\n\\f]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^ \t\r\n\f]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^ \\t\\r\\n\\f]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, value) { return value.join(""); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ident() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[A-Za-z0-9\-]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z0-9\\-]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[A-Za-z0-9\-]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9\\-]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, value) { return value.join(""); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_num() {
        var result0;
        
        result0 = parse_float();
        if (result0 === null) {
          result0 = parse_integer();
        }
        return result0;
      }
      
      function parse_integer() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, digits) { return parseInt(digits.join(""), 10); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_float() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_integer();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, parts) { return parseFloat(parts.join("")); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_s() {
        var result0, result1;
        
        if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\r\\n\\f]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \t\r\n\f]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\t\\r\\n\\f]");
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_IDENT() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = parse_ident();
        if (result0 !== null) {
          result0 = (function(offset, ident) { return ident; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("identifier");
        }
        return result0;
      }
      
      function parse_DIMENSION() {
        var result0, result1;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_NUMBER();
        if (result0 !== null) {
          result1 = parse_IDENT();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, num, unit) {
            return {
              unit: unit,
              value: num
            }
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("dimension");
        }
        return result0;
      }
      
      function parse_NUMBER() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = parse_num();
        if (result0 !== null) {
          result0 = (function(offset, num) { return num; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("number");
        }
        return result0;
      }
      
      function parse_PERCENTAGE() {
        var result0, result1;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_NUMBER();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 37) {
            result1 = "%";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"%\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, parts) {
            return {
              unit: parts[1],
              value: parts[0]
            }
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("percentage");
        }
        return result0;
      }
      
      function parse_RESOLUTION() {
        var result0, result1;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_NUMBER();
        if (result0 !== null) {
          result1 = parse_RESOLUTION_UNIT();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, num, resolution) {
            return {
              unit: resolution,
              value: num
            }
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("resolution");
        }
        return result0;
      }
      
      function parse_RESOLUTION_UNIT() {
        var result0, result1, result2, result3;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = parse_D();
        if (result0 !== null) {
          result1 = parse_P();
          if (result1 !== null) {
            result2 = parse_I();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_D();
          if (result0 !== null) {
            result1 = parse_P();
            if (result1 !== null) {
              result2 = parse_C();
              if (result2 !== null) {
                result3 = parse_M();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            result0 = parse_D();
            if (result0 !== null) {
              result1 = parse_P();
              if (result1 !== null) {
                result2 = parse_P();
                if (result2 !== null) {
                  result3 = parse_X();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            if (result0 === null) {
              result0 = parse_X();
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("resolution unit");
        }
        return result0;
      }
      
      function parse_CALC() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_C();
        if (result0 !== null) {
          result1 = parse_A();
          if (result1 !== null) {
            result2 = parse_L();
            if (result2 !== null) {
              result3 = parse_C();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 40) {
                  result4 = "(";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_EXPR();
                  if (result5 !== null) {
                    if (input.charCodeAt(pos) === 41) {
                      result6 = ")";
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expr) {
           return {
             type: "calc-expression",
             expression: expr
           }
         })(pos0, result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("calc expression");
        }
        return result0;
      }
      
      function parse_EXPR() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_s();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_s();
        }
        if (result0 !== null) {
          if (/^[^)]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^)]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^)]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^)]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_s();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_s();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, parts) { return parts.join(""); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_OPERATOR() {
        var result0;
        
        if (/^[+\-*\/]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\-*\\/]");
          }
        }
        return result0;
      }
      
      function parse_A() {
        var result0;
        
        if (/^[Aa]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[Aa]");
          }
        }
        return result0;
      }
      
      function parse_C() {
        var result0;
        
        if (/^[Cc]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[Cc]");
          }
        }
        return result0;
      }
      
      function parse_D() {
        var result0;
        
        if (/^[Dd]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[Dd]");
          }
        }
        return result0;
      }
      
      function parse_I() {
        var result0;
        
        if (/^[Ii]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[Ii]");
          }
        }
        return result0;
      }
      
      function parse_L() {
        var result0;
        
        if (/^[Ll]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[Ll]");
          }
        }
        return result0;
      }
      
      function parse_M() {
        var result0;
        
        if (/^[Mm]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[Mm]");
          }
        }
        return result0;
      }
      
      function parse_P() {
        var result0;
        
        if (/^[Pp]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[Pp]");
          }
        }
        return result0;
      }
      
      function parse_X() {
        var result0;
        
        if (/^[Xx]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[Xx]");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
},{}],2:[function(require,module,exports){
var ResponsiveImage = require('./responsiveImage.js');
var parse = require('src-n-parse').parse;

window.srcnpolyfill = function() {
  var images = [];

  function createResponsiveImage(element) {
    var i, m, rule,
        candidates = [],
        attrs = element.attributes,
        re = /^src-([0-9][1-9]*)$/i;

    for (i = 0; i < attrs.length; ++i) {
      m = attrs[i].name.match(re);
      if (m) {
        try {
          rule = parse(attrs[i].value);
        } catch (e) {
          /* Invalid src-n attribute, silently ignore like any other HTML you don't know */
          break;
        }
        candidates.push({
          rule: rule,
          index: parseInt(m[1], 10)
        });
      }
    }

    candidates.sort(function (a, b) {
      return a.index - b.index;
    });

    if (attrs.src && attrs.src.value) {
      candidates.push({
        rule: parse(attrs.src.value),
        index: 0
      });
    }

    return new ResponsiveImage(element, candidates);
  }

  function buildCollection() {
    var i,
        imgs = [],
        imagesWithSrc1 = document.querySelectorAll('img[src-1]');

    for (i = 0; i < imagesWithSrc1.length; ++i) {
      imgs.push(createResponsiveImage(imagesWithSrc1[i]));
    }

    return imgs;
  }

  function renderAll() {
    images.forEach(function(img) {
      img.setImage();
    });
  }

  // Browsers not supporting ES5 are not responsive anyway
  if (!Array.prototype.forEach || !window.matchMedia) {
    return;
  }

  images = buildCollection();
  renderAll();

  if (Element.prototype.addEventListener) {
    window.addEventListener('resize', renderAll);
  }
};

},{"./responsiveImage.js":3,"src-n-parse":1}],3:[function(require,module,exports){
module.exports = (function () {
    /**
     * @constructor
     * @param {jQuery} image
     * @param {Array} candidates
     */
    function ResponsiveImage(image, candidates) {
        this.image = image;
        this.candidates = candidates;
    }

    function hasMinimumResolution(res) {
        var operaFraction = res,
            fractionDenominator = 1;

        if (window.devicePixelRatio > res) {
            return true;
        }

        res = parseFloat(res);
        // FML opera O_o
        while (operaFraction % 1 > 0) {
            operaFraction *= 10;
            fractionDenominator *= 10;
        }

        var mediaQuery = "(-webkit-min-device-pixel-ratio: " + res + ")," +
            "(min--moz-device-pixel-ratio: " + res + ")," +
            "(-o-min-device-pixel-ratio: " + operaFraction + "/" + fractionDenominator + ")," +
            "(min-resolution: " + res + "dppx)";

        return window.matchMedia && window.matchMedia(mediaQuery).matches;
    }

    ResponsiveImage.prototype.setFromXBasedUrls = function(rule) {
        // Sort from highest resolution
        var xurls = rule.urls.urls.sort(function (a, b) {
            return a.resolution.value - b.resolution.value;
        });

        // List through available images and display closest match
        for (var j = 0; j < xurls.length; j++) {
            if (hasMinimumResolution(xurls[j].resolution.value)) {
                this.image.src = xurls[j].url;
                return;
            }
        }
        this.image.src = xurls[0].url;
    };

    ResponsiveImage.prototype.setFromViewportUrls = function (rule) {
        var j,
            image,
            imageCandidates,
            imagePixelSize,
            imageTargetSize,
            query,
            urls = rule.urls;

        // Determine which viewport we are targeting
        for (j = 0; j < urls["size-viewport-list"].length; j++) {
            var viewport = urls["size-viewport-list"][j];
            imageTargetSize = viewport["image-size"];
            if (!viewport["viewport-size"]) {
                break;
            }
            query = "(min-width:" + viewport["viewport-size"].value + viewport["viewport-size"].unit + ")";
            if (!window.matchMedia(query).matches) {
                break;
            }
        }

        // Percentages are relative to the viewport
        if (imageTargetSize.unit === '%') {
            imageTargetSize = ((imageTargetSize.value / 100) * window.innerWidth) + 'px';
        }
        if (imageTargetSize.unit) {
            imageTargetSize = imageTargetSize.value + imageTargetSize.unit;
        }
        // Set the target with and detect what the resulting pixel size will be
        this.image.style.width = imageTargetSize;
        compStyle = window.getComputedStyle ?
                    window.getComputedStyle(this.image, null) :
                    this.image.currentStyle;
        imagePixelSize = parseInt(compStyle.width, 10);
        imagePixelSize = window.devicePixelRatio ? imagePixelSize * window.devicePixelRatio : imagePixelSize;

        // Find the image with the closest resolution
        imageCandidates = rule.urls["size-based-urls"].sort(function(a, b) {
            return a.size > b.size;
        });
        for (j = 0; j < imageCandidates.length; j++) {
            image = imageCandidates[j].url;
            if (imagePixelSize < imageCandidates[j].size) {
                break;
            }
        }

        // Set the selected image
        this.image.src = image;
    };

    ResponsiveImage.prototype.setImage = function () {
        for (var i = 0; i < this.candidates.length; i++) {
            var query,
                rule = this.candidates[i].rule;
            if (!rule.type || rule.type != 'src-n-attribute') {
                continue;
            }

            // window.matchMedia requires a poly-fill for IE8
            if (rule['media-query']) {
                query = "(" + rule['media-query'].feature + ":" + rule['media-query'].dimension.value + rule['media-query'].dimension.unit + ")";
                if (!matchMedia(query).matches) {
                    continue;
                }
            }
            if (rule.urls.type) {
                if (rule.urls.type == "x-based-urls") {
                    // Missing support for other than X urls (DPI, DPCM)
                    this.setFromXBasedUrls(rule);
                }

                if (rule.urls.type == "viewport-urls") {
                   this.setFromViewportUrls(rule);
                }
            }
            break; // First one has to do it
        }
    };
    return ResponsiveImage;
})();

},{}]},{},[3,2])
;